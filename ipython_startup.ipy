%load_ext autoreload
%autoreload 2

from collections import namedtuple
import numpy as np
import ipykernel

# matplotlib if in jupyter notebook
try:
    if isinstance(get_ipython(), ipykernel.zmqshell.ZMQInteractiveShell):
        import matplotlib
        import matplotlib.pyplot as plt
        %matplotlib inline
        from matplotlib import animation

    # matplotlib params

    fig_size =  [9,5]
    params = {
              'font.size': 20,
              'legend.fontsize': 18,
              'xtick.labelsize': 20,
              'ytick.labelsize': 20,
              'axes.labelsize': 22,
              'text.usetex': True,
              'figure.figsize': fig_size
   	}
    plt.rcParams.update(params)

    ### Movie machinery #########
    class mplmov:
        pass
    mplmov.MovieAnnotateSeries = namedtuple('MovieAnnotateSeries', 'text, kwargs')
    mplmov.MovieTextSeries = namedtuple('MovieTextSeries', 'xdata, ydata, text, kwargs')
    mplmov.MovieQuiverSeries = namedtuple('MovieDataSeries', 'xdata, ydata, udata, vdata, kwargs')
    mplmov.MovieDataSeries = namedtuple('MovieDataSeries', 'xdata, ydata, kwargs')
    mplmov.MovieAxis = namedtuple('MovieAxis', 'ax, MovieDatas, kwargs')

    def save_anim(anim, fname, writer='avconv', dpi=100, fps=8):
        writer = matplotlib.animation.writers[writer](fps=fps)
        anim.save(fname,writer=writer, dpi=dpi)

    def movie_frame_plotter(frame_nb, movie_axes):
        """
        A helper function to create mpl movies with several axes.
        
        This is meant to be called by matplotlib.animation.FuncAnimation, i.e. 
        the usage is:
        matplotlib.animation.FuncAnimation(fig, movie_frame_plotter, nb_of_frames, fargs=(movie_axes,))
        
        Parameters:
        ===========

        movies_axes: a iterable containing instances of mplmov.MovieAxis.
        """
        for mAxis in movie_axes:
            ax = mAxis.ax
            ax.clear()
            ax.set(**mAxis.kwargs)
            for mData in mAxis.MovieDatas:
                if isinstance(mData, mplmov.MovieDataSeries):
                    ax.plot(mData.xdata[frame_nb], mData.ydata[frame_nb], **mData.kwargs)
                if isinstance(mData, mplmov.MovieQuiverSeries):
                    ax.quiver(mData.xdata[frame_nb], mData.ydata[frame_nb],
                              mData.udata[frame_nb], mData.vdata[frame_nb],
                              **mData.kwargs)
                if isinstance(mData, mplmov.MovieTextSeries):
                    ax.text(mData.xdata[frame_nb], mData.ydata[frame_nb],
                            mData.text[frame_nb],
                            **mData.kwargs)
                if isinstance(mData, mplmov.MovieAnnotateSeries):
                    ax.annotate(mData.text[frame_nb], **mData.kwargs)
    
    def array_duplicate(x, n):
        shape = (n,)+tuple([1]*np.array(x).ndim)
        return np.tile(x, shape)

    def parse_value(string, pattern, sep='_', fail=None, reverse=False):
        """
            get the value after 'pattern' in a string.
            
            It looks for the substring between (the last occurence of) 'pattern' and the following separator 'sep' (default is underscore).
            Ex: parse_value("blabla_foo9.1_bar10_blabla.dat", foo) returns '9.1'.

            If reverse=True, it looks for the substring between 'sep' and 'pattern'.
            
            If it fails, it returns fail (None is default).
        """
        
        pattern_loc = string.rfind(pattern)
        if pattern_loc > 0:
            if reverse:
                val = string[:pattern_loc]
                sep_loc = val.rfind(sep)
                val = val[sep_loc+len(sep):]
            else:
                val = string[pattern_loc+len(pattern):]
                sep_loc = val.find(sep)
                val = val[:sep_loc]
            return val
        else:
            return fail

except AttributeError:
    pass


import importlib
# lfdem_imports

try:
    clff = importlib.import_module("clfdem_file")
except ImportError as e:
    print("Could not import clfdem_file")
    print(e.message)

try:
    lfu = importlib.import_module("lfdem_utils")
except ImportError as e:
    print("Could not import lfdem_utils")
    print(e.message)

try:
    du = importlib.import_module("dict_utils")
except ImportError as e:
    print("Could not import dict_utils")
    print(e.message)
